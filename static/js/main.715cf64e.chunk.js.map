{"version":3,"sources":["MovieCard.jsx","SearchMovies.jsx","App.js","serviceWorker.js","index.js"],"names":["MovieCard","movie","Card","className","Image","src","poster_path","alt","title","wrapped","ui","Content","Header","toUpperCase","Meta","release_date","vote_average","Description","overview","SearchMovies","useState","query","setQuery","movies","setMovies","API_KEY","process","searchMovies","e","a","preventDefault","url","fetch","res","json","data","results","console","log","onSubmit","htmlFor","type","name","placeholder","value","onChange","target","Icon","Group","centered","filter","map","key","id","App","Container","size","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"uVAIe,SAASA,EAAT,GAA+B,IAAVC,EAAS,EAATA,MAClC,OACE,kBAACC,EAAA,EAAD,CAAMC,UAAU,QACd,kBAACC,EAAA,EAAD,CACEC,IAAG,0DAAqDJ,EAAMK,aAC9DC,IAAKN,EAAMO,MAAQ,UACnBC,SAAO,EACPC,IAAI,IAEN,kBAACR,EAAA,EAAKS,QAAN,KACE,kBAACT,EAAA,EAAKU,OAAN,KAAcX,EAAMO,MAAMK,eAC1B,6BACA,kBAACX,EAAA,EAAKY,KAAN,sBAA0Bb,EAAMc,cAChC,kBAACb,EAAA,EAAKY,KAAN,gBAAoBb,EAAMe,cAC1B,kBAACd,EAAA,EAAKe,YAAN,KAAmBhB,EAAMiB,Y,YCblB,SAASC,IAAgB,IAAD,EACXC,mBAAS,IADE,mBAC9BC,EAD8B,KACvBC,EADuB,OAETF,mBAAS,IAFA,mBAE9BG,EAF8B,KAEtBC,EAFsB,KAG/BC,EAAO,UAAMC,oCACbC,EAAY,uCAAG,WAAOC,GAAP,mBAAAC,EAAA,6DACnBD,EAAEE,iBAEIC,EAHa,4DAG8CN,EAH9C,iCAG8EJ,EAH9E,iDAKCW,MAAMD,GALP,cAKXE,EALW,gBAMEA,EAAIC,OANN,OAMXC,EANW,OAOjBX,EAAUW,EAAKC,SAPE,kDASjBC,QAAQC,IAAR,MATiB,0DAAH,sDAYlB,OACE,oCACE,0BAAMnC,UAAU,OAAOoC,SAAUZ,GAC/B,2BAAOxB,UAAU,QAAQqC,QAAQ,SAAjC,4BAGA,2BACErC,UAAU,QACVsC,KAAK,OACLC,KAAK,QACLC,YAAY,gBACZC,MAAOvB,EACPwB,SAAU,SAACjB,GAAD,OAAON,EAASM,EAAEkB,OAAOF,UAErC,4BAAQzC,UAAU,SAASsC,KAAK,UAAhC,wBAEE,kBAACM,EAAA,EAAD,CAAML,KAAK,mBAGf,6BACA,6BACA,6BACA,kBAACxC,EAAA,EAAK8C,MAAN,CAAYC,UAAQ,GACjB1B,EACE2B,QAAO,SAACjD,GAAD,OAAWA,EAAMK,eACxB6C,KAAI,SAAClD,GAAD,OACH,kBAACD,EAAD,CAAWC,MAAOA,EAAOmD,IAAKnD,EAAMoD,U,ICzBjCC,E,uKAdX,OACE,kBAACC,EAAA,EAAD,CAAWpD,UAAU,cACnB,kBAACS,EAAA,EAAD,CAAQ4C,KAAK,OAAOrD,UAAU,SAA9B,uBAGA,6BACA,6BACA,6BACA,kBAACgB,EAAD,W,GAVUsC,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAACC,GACLA,EAAaC,gBAEdC,OAAM,SAACC,GACNtC,QAAQsC,MAAMA,EAAMC,a","file":"static/js/main.715cf64e.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./App.scss\";\nimport { Card, Image } from \"semantic-ui-react\";\n\nexport default function MovieCard({ movie }) {\n  return (\n    <Card className=\"card\">\n      <Image\n        src={`https://image.tmdb.org/t/p/w185_and_h278_bestv2/${movie.poster_path}`}\n        alt={movie.title + \" poster\"}\n        wrapped\n        ui={false}\n      />\n      <Card.Content>\n        <Card.Header>{movie.title.toUpperCase()}</Card.Header>\n        <br />\n        <Card.Meta>RELEASE DATE: {movie.release_date}</Card.Meta>\n        <Card.Meta>RATING: {movie.vote_average}</Card.Meta>\n        <Card.Description>{movie.overview}</Card.Description>\n      </Card.Content>\n    </Card>\n  );\n}\n","import React, { useState } from \"react\";\nimport MovieCard from \"./MovieCard\";\nimport { Card, Icon } from \"semantic-ui-react\";\nimport \"./App.scss\";\n\nexport default function SearchMovies() {\n  const [query, setQuery] = useState(\"\");\n  const [movies, setMovies] = useState([]);\n  const API_KEY = `${process.env.REACT_APP_API_KEY}`;\n  const searchMovies = async (e) => {\n    e.preventDefault();\n\n    const url = `https://api.themoviedb.org/3/search/movie?api_key=${API_KEY}&language=en-US&query=${query}&page=1&include_adult=false`;\n    try {\n      const res = await fetch(url);\n      const data = await res.json();\n      setMovies(data.results);\n    } catch (err) {\n      console.log(err);\n    }\n  };\n  return (\n    <>\n      <form className=\"form\" onSubmit={searchMovies}>\n        <label className=\"label\" htmlFor=\"query\">\n          M O V I E &nbsp; N A M E :\n        </label>\n        <input\n          className=\"input\"\n          type=\"text\"\n          name=\"query\"\n          placeholder=\"ex: Star Wars\"\n          value={query}\n          onChange={(e) => setQuery(e.target.value)}\n        />\n        <button className=\"button\" type=\"submit\">\n          S E A R C H &nbsp; &nbsp;\n          <Icon name=\"video camera\" />\n        </button>\n      </form>\n      <br />\n      <br />\n      <br />\n      <Card.Group centered>\n        {movies\n          .filter((movie) => movie.poster_path)\n          .map((movie) => (\n            <MovieCard movie={movie} key={movie.id} />\n          ))}\n      </Card.Group>\n    </>\n  );\n}\n","import React, { Component } from \"react\";\nimport { Header, Container } from \"semantic-ui-react\";\nimport \"./App.scss\";\n\nimport SearchMovies from \"./SearchMovies.jsx\";\n\nclass App extends Component {\n  render() {\n    return (\n      <Container className=\"responsive\">\n        <Header size=\"huge\" className=\"title\">\n          . . . A C T I O N !\n        </Header>\n        <br />\n        <br />\n        <br />\n        <SearchMovies />\n      </Container>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}